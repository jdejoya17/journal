# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class RegisterNewUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, password: str=None, first_name: str=None, last_name: str=None, password_verification: str=None):  # noqa: E501
        """RegisterNewUser - a model defined in Swagger

        :param username: The username of this RegisterNewUser.  # noqa: E501
        :type username: str
        :param password: The password of this RegisterNewUser.  # noqa: E501
        :type password: str
        :param first_name: The first_name of this RegisterNewUser.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this RegisterNewUser.  # noqa: E501
        :type last_name: str
        :param password_verification: The password_verification of this RegisterNewUser.  # noqa: E501
        :type password_verification: str
        """
        self.swagger_types = {
            'username': str,
            'password': str,
            'first_name': str,
            'last_name': str,
            'password_verification': str
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'password_verification': 'password_verification'
        }
        self._username = username
        self._password = password
        self._first_name = first_name
        self._last_name = last_name
        self._password_verification = password_verification

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterNewUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegisterNewUser of this RegisterNewUser.  # noqa: E501
        :rtype: RegisterNewUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this RegisterNewUser.

        user unique public identifcation name handle  # noqa: E501

        :return: The username of this RegisterNewUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this RegisterNewUser.

        user unique public identifcation name handle  # noqa: E501

        :param username: The username of this RegisterNewUser.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this RegisterNewUser.

        specified account password  # noqa: E501

        :return: The password of this RegisterNewUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this RegisterNewUser.

        specified account password  # noqa: E501

        :param password: The password of this RegisterNewUser.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def first_name(self) -> str:
        """Gets the first_name of this RegisterNewUser.

        first name of the user  # noqa: E501

        :return: The first_name of this RegisterNewUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this RegisterNewUser.

        first name of the user  # noqa: E501

        :param first_name: The first_name of this RegisterNewUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this RegisterNewUser.

        last name of the user  # noqa: E501

        :return: The last_name of this RegisterNewUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this RegisterNewUser.

        last name of the user  # noqa: E501

        :param last_name: The last_name of this RegisterNewUser.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def password_verification(self) -> str:
        """Gets the password_verification of this RegisterNewUser.

        verify specified account password  # noqa: E501

        :return: The password_verification of this RegisterNewUser.
        :rtype: str
        """
        return self._password_verification

    @password_verification.setter
    def password_verification(self, password_verification: str):
        """Sets the password_verification of this RegisterNewUser.

        verify specified account password  # noqa: E501

        :param password_verification: The password_verification of this RegisterNewUser.
        :type password_verification: str
        """
        if password_verification is None:
            raise ValueError("Invalid value for `password_verification`, must not be `None`")  # noqa: E501

        self._password_verification = password_verification
