openapi: 3.0.3
info:
  title: Journal Backend API
  description: Backend for a journaling application
  version: 1.0.0
# TODO:
# termsOfService: {link to terms of service}
# contact:
#   email: {contact email}
# license:
#   name: {license name}
#   url: {link to license terms}
servers:
  - url: https://localhost/api
tags:
  - name: Authentication
    description: Registration, login, and logout of an account user.
  - name: Users
    description: Operations about users.
  - name: Roles
    description: Operations about roles.
  - name: Permissions
    description: Operations about permissions
  - name: Journals
    description: Operations about journals
  - name: JournalsEntries
    description: Operations about journals entries
paths:
  /v1/register:
    post:
      tags: 
        - Authentication
      description: Registers a new users.
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/RegisterNewUser'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/login:
    post:
      tags:
        - Authentication
      description: Login a user to Journal
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/LoginUser'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
  /v1/logout:
    post:
      tags:
        - Authentication
      description: Logout a user from Journal
      operationId: logoutUser
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    Email:
      type: object
      properties:
        email:
          description: email of the user
          type: string
    UserName:
      type: object 
      properties:
        username:
          description: user unique public identifcation name handle
          type: string
    Password:
      type: object
      properties:
          password:
            description: specified account password
            type: string
    User:
      required:
        - email
          - password
      allOf:
        - $ref: '#/components/schemas/Email'
        - $ref: '#/components/schemas/UserName'
        - $ref: '#/components/schemas/Password'
        - type: object
          properties:
            first_name:
              description: first name of the user
              type: string
            last_name:
              description: last name of the user
              type: string
    LoginUserByEmail:
      required:
        - email
        - password 
      allOf:
        - $ref: '#/components/schemas/Email'
        - $ref: '#/components/schemas/Password'
    LoginUserByUserName:
      required:
        - username
        - password 
      allOf:
        - $ref: '#/components/schemas/UserName'
        - $ref: '#/components/schemas/Password'
    RegisterNewUser:
      required:
        - email
        - password
        - password_verification
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            password_verification:
              description: verify specified account password
              type: string
    # generic http response model
    HTTPResponse:
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: HTTP status code
          type: string
        message:
          description: HTTP error message
          type: string
  # TODO: extend input format to xml and other popular formatting
  requestBodies:
    LoginUser:
      description: Login to Journal by email or username.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/LoginUserByEmail'
              - $ref: '#/components/schemas/LoginUserByUserName'
    RegisterNewUser:
      description: New user object that needs to be registered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterNewUser'
  responses:
    OK:
      description: successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    Created:
      description: successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    BadRequest:
      description: client request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    NotFound:
      description: the specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'
    Unauthorized:
      description: client is unauthorized to access this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPResponse'